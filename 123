-- Eps1llon Hub Auto Joiner with Taser Gun Integration
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local localPlayer = Players.LocalPlayer

-- Configuration
local BACKEND_URL = 'https://brainrotss.up.railway.app/brainrots'
local MAX_JOIN_ATTEMPTS = 3  -- Limited to 3 attempts per server
local REFRESH_INTERVAL = 0.1  -- Instant refresh for immediate detection
local SETTINGS_FOLDER = "workspace"
local SETTINGS_FILE = "Eps1llonHub_AutoJoiner_Settings.json"

-- State variables
local autoJoinMode = nil
local searchActive = false
local searchTarget = nil
local moneyFilter = 10000000 -- Default to 10M+
local joinAttempts = {}
local knownServers = {} -- Track servers we've already seen
local lastKnownServerCount = 0
local filterDropdownOpen = false
local lastData = ''
local isMinimized = false
local isExpanded = false
local waitingForServer = false
local scriptStartTime = tick() -- Track when script was executed

-- Debug function
local function debugLog(message)
    print("[AutoJoiner] " .. tostring(message))
end

-- File system functions (using workspace folder)
local function getSettingsPath()
    local success, path = pcall(function()
        if writefile and isfile then
            local possiblePaths = {
                "workspace/",
                "workspace/Eps1llonHub/",
                "",
            }
            
            for _, basePath in ipairs(possiblePaths) do
                local fullPath = basePath .. SETTINGS_FILE
                if isfile(fullPath) then
                    return fullPath
                end
            end
            
            for _, basePath in ipairs(possiblePaths) do
                local testPath = basePath .. "test.tmp"
                local testSuccess = pcall(function()
                    writefile(testPath, "{}")
                    delfile(testPath)
                    return true
                end)
                if testSuccess then
                    return basePath .. SETTINGS_FILE
                end
            end
        end
    end)
    
    if success and path then
        return path
    else
        return SETTINGS_FILE
    end
end

-- Load settings from workspace folder
local function loadSettings()
    local settingsPath = getSettingsPath()
    local success, data = pcall(function()
        if readfile and isfile and isfile(settingsPath) then
            local content = readfile(settingsPath)
            return HttpService:JSONDecode(content)
        end
    end)
    
    if success and type(data) == "table" then
        moneyFilter = data.moneyFilter or moneyFilter
        debugLog("Loaded filter setting: " .. formatMoney(moneyFilter))
        return data
    else
        debugLog("No settings file found, using defaults")
    end
    return nil
end

-- Save settings to workspace folder
local function saveSettings()
    local settings = {
        moneyFilter = moneyFilter,
        lastUpdated = tick()
    }
    
    local settingsPath = getSettingsPath()
    local success, err = pcall(function()
        if writefile then
            local content = HttpService:JSONEncode(settings)
            writefile(settingsPath, content)
            debugLog("Saved filter setting: " .. formatMoney(moneyFilter))
        end
    end)
    
    if not success then
        debugLog("Failed to save settings: " .. tostring(err))
    end
    return success
end

-- Load settings on startup
loadSettings()

-- Theme (matching main GUI)
local ACCENT_A = Color3.fromRGB(64, 156, 255)
local ACCENT_B = Color3.fromRGB(0, 204, 204)
local THEME = {
    bg = Color3.fromRGB(12, 14, 18),
    panel = Color3.fromRGB(16, 18, 24),
    panel2 = Color3.fromRGB(22, 24, 30),
    text = Color3.fromRGB(230, 235, 240),
    textDim = Color3.fromRGB(170, 176, 186),
    accentA = ACCENT_A, accentB = ACCENT_B,
    btn = Color3.fromRGB(28, 30, 36),
    btnHover = Color3.fromRGB(36, 38, 46),
    btnActive = Color3.fromRGB(42, 44, 56),
    gold = Color3.fromRGB(255, 215, 0),
    success = Color3.fromRGB(40, 167, 69),
    successHover = Color3.fromRGB(60, 187, 89),
    scrollBar = Color3.fromRGB(80, 84, 96),
    greyBg = Color3.fromRGB(45, 48, 56),
    dragBase = Color3.fromRGB(210, 214, 218),
    dragBright = Color3.fromRGB(245, 248, 250),
    sidebarActive = Color3.fromRGB(35, 38, 46),
    sidebarHighlight = Color3.fromRGB(64, 156, 255),
    btnActive = Color3.fromRGB(50, 115, 255)
}

-- Helper functions
local function clean(str)
    return tostring(str or ''):gsub('%+', ''):gsub('^%s(.-)%s*$', '%1')
end

local function toTitleCase(s)
    return (s:gsub('(%a)([%w_\']*)', function(first, rest) return first:upper() .. rest:lower() end))
end

local function parseMoney(moneyStr)
    if not moneyStr or moneyStr == 'TBA' then return 0 end
    moneyStr = clean(moneyStr)
    local num, suffix = moneyStr:match('^%$?([%d%.]+)([MKBT]?)')
    if not num then return 0 end
    num = tonumber(num)
    if not num then return 0 end
    if suffix == 'B' then return num * 1e9
    elseif suffix == 'M' then return num * 1e6
    elseif suffix == 'K' then return num * 1e3
    elseif suffix == 'T' then return num * 1e12
    else return num end
end

local function formatMoney(num)
    if num == 0 then return "TBA" end
    if num >= 1000000000 then
        return string.format("$%.1fB", num / 1000000000)
    elseif num >= 1000000 then
        return string.format("$%.1fM", num / 1000000)
    elseif num >= 1000 then
        return string.format("$%.0fK", num / 1000)
    else
        return "$" .. tostring(num)
    end
end

-- Root GUI
local autoJoinGui = Instance.new('ScreenGui')
autoJoinGui.Name = 'Eps1llonHub_AutoJoiner'
autoJoinGui.ResetOnSpawn = false
autoJoinGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
autoJoinGui.Parent = localPlayer:WaitForChild('PlayerGui')

-- Adjust sizes for GUI
local guiWidth = 580
local guiHeight = 340

-- Root container (matching main GUI style)
local rootFrame = Instance.new('Frame')
rootFrame.Name = 'Root'
rootFrame.Size = UDim2.new(0, guiWidth, 0, guiHeight)
rootFrame.Position = UDim2.new(0.5, -guiWidth/2, 0.5, -guiHeight/2)
rootFrame.BackgroundColor3 = THEME.bg
rootFrame.BackgroundTransparency = 0.02
rootFrame.BorderSizePixel = 0
rootFrame.Active = true
rootFrame.Draggable = false
rootFrame.ZIndex = 1
rootFrame.Parent = autoJoinGui

local rootCorner = Instance.new('UICorner'); rootCorner.CornerRadius = UDim.new(0, 14); rootCorner.Parent = rootFrame

-- Subtle outer stroke
local rootStroke = Instance.new('UIStroke')
rootStroke.Color = Color3.fromRGB(255, 255, 255)
rootStroke.Transparency = 0.94
rootStroke.Thickness = 1
rootStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
rootStroke.Parent = rootFrame

-- Bottom straight drag line
local OUTSET = 8
local dragBar = Instance.new('Frame')
dragBar.Name = 'DragBar'
dragBar.AnchorPoint = Vector2.new(0.5, 0)
dragBar.Size = UDim2.new(0.6, 0, 0, 6)
dragBar.Position = UDim2.new(0.5, 0, 1, OUTSET)
dragBar.BackgroundColor3 = THEME.dragBase
dragBar.BackgroundTransparency = 0.55
dragBar.BorderSizePixel = 0
dragBar.ZIndex = 5
dragBar.Parent = rootFrame

local dragCorner = Instance.new('UICorner'); dragCorner.CornerRadius = UDim.new(1, 0); dragCorner.Parent = dragBar

-- Header: brand (matching main GUI)
local brandLogo = Instance.new('ImageLabel')
brandLogo.Name = 'BrandLogo'
brandLogo.Size = UDim2.new(0, 24, 0, 24)
brandLogo.Position = UDim2.new(0, 12, 0, 10)
brandLogo.BackgroundTransparency = 1
brandLogo.Image = 'rbxassetid://116553067824026'
brandLogo.ScaleType = Enum.ScaleType.Fit
brandLogo.ZIndex = 2
brandLogo.Parent = rootFrame

local brandContainer = Instance.new('Frame')
brandContainer.Name = 'BrandContainer'
brandContainer.Size = UDim2.new(0, 300, 0, 32)
brandContainer.Position = UDim2.new(0, 42, 0, 8)
brandContainer.BackgroundTransparency = 1
brandContainer.ZIndex = 2
brandContainer.Parent = rootFrame

local brandTitlePrimary = Instance.new('TextLabel')
brandTitlePrimary.Name = 'BrandTitle'
brandTitlePrimary.Size = UDim2.new(1, 0, 0, 17)
brandTitlePrimary.BackgroundTransparency = 1
brandTitlePrimary.Text = 'Eps1llon Hub | Auto Joiner'
brandTitlePrimary.TextColor3 = THEME.text
brandTitlePrimary.TextSize = 17
brandTitlePrimary.Font = Enum.Font.GothamBold
brandTitlePrimary.TextXAlignment = Enum.TextXAlignment.Left
brandTitlePrimary.ZIndex = 2
brandTitlePrimary.Parent = brandContainer

local brandSubtitle = Instance.new('TextLabel')
brandSubtitle.Name = 'BrandSubtitle'
brandSubtitle.Size = UDim2.new(1, 0, 0, 13)
brandSubtitle.Position = UDim2.new(0, 0, 0, 17)
brandSubtitle.BackgroundTransparency = 1
brandSubtitle.Text = 'Premium'
brandSubtitle.TextColor3 = THEME.textDim
brandSubtitle.TextSize = 11
brandSubtitle.Font = Enum.Font.GothamSemibold
brandSubtitle.TextXAlignment = Enum.TextXAlignment.Left
brandSubtitle.ZIndex = 2
brandSubtitle.Parent = brandContainer

-- Control buttons (Minimize | Expand | Close) - spaced out more
local minimizeBtn = Instance.new('ImageButton')
minimizeBtn.Name = 'Minimize'
minimizeBtn.Size = UDim2.new(0, 20, 0, 20)
minimizeBtn.Position = UDim2.new(1, -100, 0, 8)
minimizeBtn.BackgroundTransparency = 1
minimizeBtn.Image = 'rbxassetid://110574729016386'
minimizeBtn.ImageColor3 = THEME.textDim
minimizeBtn.ScaleType = Enum.ScaleType.Fit
minimizeBtn.ZIndex = 2
minimizeBtn.Parent = rootFrame

local expandBtn = Instance.new('ImageButton')
expandBtn.Name = 'Expand'
expandBtn.Size = UDim2.new(0, 20, 0, 20)
expandBtn.Position = UDim2.new(1, -70, 0, 8)
expandBtn.BackgroundTransparency = 1
expandBtn.Image = 'rbxassetid://137817849385475'
expandBtn.ImageColor3 = THEME.textDim
expandBtn.ScaleType = Enum.ScaleType.Fit
expandBtn.ZIndex = 2
expandBtn.Parent = rootFrame

local closeBtn = Instance.new('ImageButton')
closeBtn.Name = 'Close'
closeBtn.Size = UDim2.new(0, 20, 0, 20)
closeBtn.Position = UDim2.new(1, -40, 0, 8)
closeBtn.BackgroundTransparency = 1
closeBtn.Image = 'rbxassetid://71175513861523'
closeBtn.ImageColor3 = THEME.textDim
closeBtn.ScaleType = Enum.ScaleType.Fit
closeBtn.ZIndex = 2
closeBtn.Parent = rootFrame

-- Content host (matching main GUI style)
local contentHost = Instance.new('Frame')
contentHost.Name = 'ContentHost'
contentHost.Size = UDim2.new(1, -20, 1, -54)
contentHost.Position = UDim2.new(0, 10, 0, 44)
contentHost.BackgroundColor3 = THEME.panel
contentHost.BackgroundTransparency = 0.06
contentHost.ZIndex = 2
contentHost.Parent = rootFrame

local contentCorner = Instance.new('UICorner'); contentCorner.CornerRadius = UDim.new(0, 10); contentCorner.Parent = contentHost

-- Auto-Join Panel (main content area)
local autoJoinPanel = Instance.new('Frame')
autoJoinPanel.Name = 'AutoJoinPanel'
autoJoinPanel.Size = UDim2.new(1, -10, 1, -10)
autoJoinPanel.Position = UDim2.new(0, 5, 0, 5)
autoJoinPanel.BackgroundColor3 = THEME.panel2
autoJoinPanel.BackgroundTransparency = 0.06
autoJoinPanel.ZIndex = 3
autoJoinPanel.Parent = contentHost

local autoJoinCorner = Instance.new('UICorner'); autoJoinCorner.CornerRadius = UDim.new(0, 10); autoJoinCorner.Parent = autoJoinPanel

-- Auto-Join Controls (matching finder style)
local autoJoinFrame = Instance.new('Frame'); autoJoinFrame.Size = UDim2.new(1, -8, 0, 26); autoJoinFrame.Position = UDim2.new(0, 4, 0, 4); autoJoinFrame.BackgroundTransparency = 1; autoJoinFrame.Parent = autoJoinPanel
local secretBtn = Instance.new('TextButton'); secretBtn.Size = UDim2.new(0.48, 0, 1, 0); secretBtn.BackgroundColor3 = THEME.btn; secretBtn.Text = 'Secret'; secretBtn.TextColor3 = THEME.text; secretBtn.TextSize = 13; secretBtn.Font = Enum.Font.GothamBold; secretBtn.AutoButtonColor = true; secretBtn.Parent = autoJoinFrame
local secretCorner = Instance.new('UICorner'); secretCorner.CornerRadius = UDim.new(0, 8); secretCorner.Parent = secretBtn
local godBtn = Instance.new('TextButton'); godBtn.Size = UDim2.new(0.48, 0, 1, 0); godBtn.Position = UDim2.new(0.52, 0, 0, 0); godBtn.BackgroundColor3 = THEME.btn; godBtn.Text = 'Brainrot God'; godBtn.TextColor3 = THEME.text; godBtn.TextSize = 13; godBtn.Font = Enum.Font.GothamBold; godBtn.AutoButtonColor = true; godBtn.Parent = autoJoinFrame
local godCorner = Instance.new('UICorner'); godCorner.CornerRadius = UDim.new(0, 8); godCorner.Parent = godBtn

-- Search row
local searchFrame = Instance.new('Frame'); searchFrame.Size = UDim2.new(1, -8, 0, 26); searchFrame.Position = UDim2.new(0, 4, 0, 34); searchFrame.BackgroundTransparency = 1; searchFrame.Parent = autoJoinPanel
local searchInput = Instance.new('Frame'); searchInput.Name = 'SearchInput'; searchInput.Size = UDim2.new(1, -66, 1, 0); searchInput.BackgroundColor3 = THEME.btn; searchInput.Parent = searchFrame
local searchInputCorner = Instance.new('UICorner'); searchInputCorner.CornerRadius = UDim.new(0, 8); searchInputCorner.Parent = searchInput
local searchIcon = Instance.new('ImageLabel'); searchIcon.Name='Icon'; searchIcon.Size=UDim2.new(0,14,0,14); searchIcon.Position=UDim2.new(0,8,0.5,-7); searchIcon.BackgroundTransparency=1; searchIcon.Image='rbxassetid://86260290442059'; searchIcon.ImageColor3=THEME.textDim; searchIcon.Parent=searchInput
local searchBox = Instance.new('TextBox'); searchBox.Size=UDim2.new(1,-36,1,0); searchBox.Position=UDim2.new(0,28,0,0); searchBox.PlaceholderText='Search'; searchBox.Text=''; searchBox.Font=Enum.Font.Gotham; searchBox.TextSize=12; searchBox.BackgroundTransparency=1; searchBox.TextColor3=THEME.text; searchBox.PlaceholderColor3=THEME.textDim; searchBox.ClearTextOnFocus=false; searchBox.Parent=searchInput
local searchToggle = Instance.new('TextButton'); searchToggle.Size=UDim2.new(0,62,1,0); searchToggle.Position=UDim2.new(1,-62,0,0); searchToggle.BackgroundColor3=THEME.btn; searchToggle.Text='Off'; searchToggle.TextColor3=THEME.text; searchToggle.TextSize=12; searchToggle.Font=Enum.Font.GothamBold; searchToggle.Parent=searchFrame
local searchToggleCorner = Instance.new('UICorner'); searchToggleCorner.CornerRadius = UDim.new(0, 8); searchToggleCorner.Parent = searchToggle

-- Filter row
local filterBtn = Instance.new('TextButton'); filterBtn.Size=UDim2.new(1,-8,0,26); filterBtn.Position=UDim2.new(0,4,0,64); filterBtn.BackgroundColor3=THEME.btn; filterBtn.Text='Filter: ' .. formatMoney(moneyFilter); filterBtn.TextColor3=THEME.text; filterBtn.TextSize=12; filterBtn.Font=Enum.Font.GothamBold; filterBtn.Parent=autoJoinPanel
local filterBtnCorner = Instance.new('UICorner'); filterBtnCorner.CornerRadius=UDim.new(0,8); filterBtnCorner.Parent=filterBtn
local dropdownFrame = Instance.new('Frame'); dropdownFrame.Size=UDim2.new(1,-8,0,150); dropdownFrame.Position=UDim2.new(0,4,0,94); dropdownFrame.BackgroundColor3=THEME.panel; dropdownFrame.BorderSizePixel=0; dropdownFrame.Visible=false; dropdownFrame.ZIndex=10; dropdownFrame.Parent=autoJoinPanel
local dropdownCorner = Instance.new('UICorner'); dropdownCorner.CornerRadius=UDim.new(0,8); dropdownCorner.Parent=dropdownFrame
local dropdownStroke = Instance.new('UIStroke'); dropdownStroke.Color = Color3.fromRGB(255,255,255); dropdownStroke.Transparency=0.93; dropdownStroke.Thickness=1; dropdownStroke.Parent=dropdownFrame

-- Results list
local scrollContainer = Instance.new('Frame'); scrollContainer.Size=UDim2.new(1,-8,1,-98); scrollContainer.Position=UDim2.new(0,4,0,94); scrollContainer.BackgroundColor3=THEME.panel; scrollContainer.BackgroundTransparency=0.06; scrollContainer.Parent=autoJoinPanel
local scrollCorner = Instance.new('UICorner'); scrollCorner.CornerRadius = UDim.new(0, 8); scrollCorner.Parent = scrollContainer
local scroll = Instance.new('ScrollingFrame'); scroll.Name='ServerList'; scroll.Size=UDim2.new(1,-6,1,-6); scroll.Position=UDim2.new(0,3,0,3); scroll.BackgroundTransparency=1; scroll.BorderSizePixel=0; scroll.CanvasSize=UDim2.new(0,0,0,0); scroll.ScrollBarThickness=6; scroll.ScrollBarImageColor3=THEME.scrollBar; scroll.ScrollingDirection=Enum.ScrollingDirection.Y; scroll.Parent=scrollContainer
local layout = Instance.new('UIListLayout'); layout.SortOrder=Enum.SortOrder.LayoutOrder; layout.Padding=UDim.new(0,6); layout.Parent=scroll
layout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function() scroll.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 8) end)

-- Filter options
local filterOptions = {
    {text = 'All', value = 0},
    {text = '1M+', value = 1000000},
    {text = '5M+', value = 5000000},
    {text = '10M+', value = 10000000},
    {text = '50M+', value = 50000000},
}

local yPos = 4
for _, option in ipairs(filterOptions) do
    local optionBtn = Instance.new('TextButton')
    optionBtn.Size = UDim2.new(1, -8, 0, 28)
    optionBtn.Position = UDim2.new(0, 4, 0, yPos)
    optionBtn.BackgroundColor3 = THEME.btn
    optionBtn.Text = option.text
    optionBtn.TextColor3 = THEME.text
    optionBtn.TextSize = 13
    optionBtn.Font = Enum.Font.Gotham
    optionBtn.BorderSizePixel = 0
    optionBtn.ZIndex = 11
    optionBtn.Parent = dropdownFrame

    local optionCorner = Instance.new('UICorner'); optionCorner.CornerRadius = UDim.new(0, 6); optionCorner.Parent = optionBtn

    optionBtn.MouseEnter:Connect(function() optionBtn.BackgroundColor3 = THEME.btnHover end)
    optionBtn.MouseLeave:Connect(function() optionBtn.BackgroundColor3 = THEME.btn end)

    optionBtn.Activated:Connect(function()
        moneyFilter = option.value; 
        filterBtn.Text = 'Filter: ' .. option.text; 
        dropdownFrame.Visible = false; 
        filterDropdownOpen = false;
        saveSettings()
        debugLog("Filter set to: " .. formatMoney(moneyFilter))
    end)

    yPos = yPos + 30
end

-- Update filter button text to show current filter
filterBtn.Text = 'Filter: ' .. formatMoney(moneyFilter)

-- Real-time Auto-Join Logic Functions
local function setAutoJoin(mode)
    autoJoinMode = mode
    if mode == 'Secret' then
        TweenService:Create(secretBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btnActive, TextColor3 = Color3.fromRGB(248,250,255)}):Play()
        TweenService:Create(godBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn, TextColor3 = THEME.text}):Play()
        searchActive = false; searchToggle.Text = 'Off'; searchToggle.BackgroundColor3 = THEME.btn
        debugLog("Auto-join mode set to Secret")
    elseif mode == 'God' then
        TweenService:Create(godBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btnActive, TextColor3 = Color3.fromRGB(248,250,255)}):Play()
        TweenService:Create(secretBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn, TextColor3 = THEME.text}):Play()
        searchActive = false; searchToggle.Text = 'Off'; searchToggle.BackgroundColor3 = THEME.btn
        debugLog("Auto-join mode set to Brainrot God")
    else
        TweenService:Create(godBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn, TextColor3 = THEME.text}):Play()
        TweenService:Create(secretBtn, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn, TextColor3 = THEME.text}):Play()
        debugLog("Auto-join mode disabled")
    end
end

-- Real-time server joining (only new servers after script execution)
local function processNewServers(servers)
    if not autoJoinMode then return end
    
    -- Filter and sort servers
    local filtered = {}
    for _, server in ipairs(servers) do
        local moneyPerSec = server.moneyPerSec and clean(server.moneyPerSec) or '?'
        local moneyValue = parseMoney(moneyPerSec)
        if moneyValue >= moneyFilter then 
            table.insert(filtered, server) 
        end
    end
    
    -- Sort by recency (newest first)
    table.sort(filtered, function(a, b)
        local timeA = tonumber(a.lastSeen) or 0
        local timeB = tonumber(b.lastSeen) or 0
        return timeA > timeB
    end)
    
    -- Process new servers only (after script execution)
    for _, server in ipairs(filtered) do
        local jobId = clean(server.jobId or server.instanceId)
        local serverTime = tonumber(server.lastSeen) or 0
        
        -- Only process servers that appeared after script execution
        if serverTime > scriptStartTime then
            -- Check if we've seen this server before
            if not knownServers[jobId] then
                -- New server detected!
                knownServers[jobId] = true
                debugLog("NEW SERVER DETECTED: " .. jobId .. " - Attempting to join immediately...")
                
                -- Try to join immediately (max 3 attempts)
                local attempts = joinAttempts[jobId] or 0
                if attempts < MAX_JOIN_ATTEMPTS then
                    local name = clean(server.name)
                    local petRarity = "Unknown"
                    
                    debugLog("Join attempt " .. (attempts + 1) .. "/" .. MAX_JOIN_ATTEMPTS .. " for server: " .. jobId)
                    
                    if (autoJoinMode == 'Secret') or (autoJoinMode == 'God') then
                        local mps = server.moneyPerSec and clean(server.moneyPerSec) or '?'
                        local mv = parseMoney(mps)
                        
                        if mv >= 10000000 then
                            -- High value server
                            local placeId = 109983668079237
                            debugLog("Attempting teleport to high-value server: " .. jobId)
                            task.spawn(function() 
                                pcall(function() 
                                    TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) 
                                end) 
                            end)
                        else
                            -- Regular server
                            local placeId = tonumber(server.serverId)
                            if placeId and jobId and jobId ~= '' then 
                                debugLog("Attempting teleport to regular server: " .. jobId)
                                task.spawn(function() 
                                    pcall(function() 
                                        TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) 
                                    end) 
                                end) 
                            end
                        end
                        
                        -- Increment attempt count
                        joinAttempts[jobId] = attempts + 1
                        break -- Only try one new server at a time
                    end
                else
                    debugLog("Server " .. jobId .. " has reached max attempts (" .. MAX_JOIN_ATTEMPTS .. "), skipping...")
                end
            end
        end
    end
    
    -- Handle search mode for new servers
    if searchActive and searchTarget then
        for _, server in ipairs(filtered) do
            local jobId = clean(server.jobId or server.instanceId)
            local serverTime = tonumber(server.lastSeen) or 0
            
            -- Only process servers that appeared after script execution
            if serverTime > scriptStartTime then
                -- Check if this is a new server we haven't seen
                if not knownServers[jobId] then
                    local name = clean(server.name):lower()
                    if name:find(searchTarget, 1, true) then
                        knownServers[jobId] = true
                        debugLog("NEW SEARCH MATCH FOUND: " .. jobId .. " - Searching for '" .. searchTarget .. "'")
                        
                        local mps = server.moneyPerSec and clean(server.moneyPerSec) or '?'
                        local mv = parseMoney(mps)
                        
                        if mv >= 10000000 then
                            local placeId = 109983668079237
                            debugLog("Attempting teleport to searched high-value server: " .. jobId)
                            task.spawn(function() 
                                pcall(function() 
                                    TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) 
                                end) 
                            end)
                        else
                            local placeId = tonumber(server.serverId)
                            if placeId and jobId and jobId ~= '' then 
                                debugLog("Attempting teleport to searched regular server: " .. jobId)
                                task.spawn(function() 
                                    pcall(function() 
                                        TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) 
                                    end) 
                                end) 
                            end
                        end
                        break -- Only try one search match at a time
                    end
                end
            end
        end
    end
end

local function clearGui()
    for _, child in ipairs(scroll:GetChildren()) do if not child:IsA('UIListLayout') then child:Destroy() end end
end

-- HTTP Request Functions (Receive-only mode)
local function getBrainrots()
    local resp
    
    if syn and syn.request then 
        local success, result = pcall(function()
            return syn.request({
                Url = BACKEND_URL,
                Method = 'GET',
                Headers = {
                    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                }
            })
        end)
        if success and result then
            resp = result
        end
    end
    
    if not resp and http and http.request then
        local success, result = pcall(function()
            return http.request({
                Url = BACKEND_URL,
                Method = 'GET'
            })
        end)
        if success and result then
            resp = result
        end
    end
    
    if not resp and request then
        local success, result = pcall(function()
            return request({
                Url = BACKEND_URL,
                Method = 'GET'
            })
        end)
        if success and result then
            resp = result
        end
    end
    
    if not resp and http_request then
        local success, result = pcall(function()
            return http_request({
                Url = BACKEND_URL,
                Method = 'GET'
            })
        end)
        if success and result then
            resp = result
        end
    end
    
    if not resp then
        local success, result = pcall(function()
            if syn and syn.request then
                return syn.request({Url = BACKEND_URL, Method = 'GET'})
            elseif http and http.request then
                return http.request({Url = BACKEND_URL, Method = 'GET'})
            elseif request then
                return request({Url = BACKEND_URL, Method = 'GET'})
            elseif http_request then
                return http_request({Url = BACKEND_URL, Method = 'GET'})
            end
        end)
        if success and result then
            resp = result
        end
    end
    
    if resp and resp.StatusCode == 200 then
        local ok, data = pcall(function() return HttpService:JSONDecode(resp.Body) end)
        if ok and type(data) == 'table' then
            return data
        end
    end
    
    return {}
end

local function renderServers(servers)
    clearGui()
    local filtered = {}
    for _, server in ipairs(servers) do
        local moneyPerSec = server.moneyPerSec and clean(server.moneyPerSec) or '?'
        local moneyValue = parseMoney(moneyPerSec)
        if moneyValue >= moneyFilter then table.insert(filtered, server) end
    end
    
    -- Sort by recency (newest first)
    table.sort(filtered, function(a, b)
        local timeA = tonumber(a.lastSeen) or 0
        local timeB = tonumber(b.lastSeen) or 0
        return timeA > timeB
    end)
    
    if #filtered == 0 and (autoJoinMode or searchActive) then
        local waitingMsg = Instance.new('TextLabel')
        waitingMsg.Size = UDim2.new(1, -16, 0, 50)
        waitingMsg.Position = UDim2.new(0, 8, 0, 4)
        waitingMsg.BackgroundTransparency = 1
        waitingMsg.Text = 'Waiting For New Servers...\n' .. ((autoJoinMode=='Secret' and 'Looking For Secret Pets') or (autoJoinMode=='God' and 'Looking For Brainrot God Pets') or (searchActive and searchTarget and ('Looking For: ' .. toTitleCase(searchBox.Text)) or ''))
        waitingMsg.TextColor3 = THEME.gold
        waitingMsg.TextSize = 15
        waitingMsg.Font = Enum.Font.GothamBold
        waitingMsg.TextWrapped = true
        waitingMsg.Parent = scroll
        waitingForServer = true
        return
    elseif #filtered == 0 then
        local none = Instance.new('TextLabel'); none.Size=UDim2.new(1,0,0,36); none.BackgroundTransparency=1; none.Text='No Servers Found'; none.TextColor3=THEME.textDim; none.TextSize=15; none.Font=Enum.Font.GothamBold; none.Parent=scroll
        waitingForServer = false; return
    end
    waitingForServer = false
    for _, server in ipairs(filtered) do
        local rawName = clean(server.name)
        local name = toTitleCase(rawName)
        local players = clean(server.players)
        local moneyPerSec = server.moneyPerSec and clean(server.moneyPerSec) or '?'
        if moneyPerSec == '' then moneyPerSec = '?' end
        local entry = Instance.new('Frame'); entry.Size=UDim2.new(1,-6,0,68); entry.BackgroundColor3=THEME.btn; entry.Parent=scroll
        local entryCorner = Instance.new('UICorner'); entryCorner.CornerRadius = UDim.new(0, 8); entryCorner.Parent = entry
        local label = Instance.new('TextLabel')
        label.Size = UDim2.new(1, -85, 1, 0); label.Position = UDim2.new(0, 10, 0, 0)
        label.BackgroundTransparency = 1; label.TextXAlignment = Enum.TextXAlignment.Left; label.TextYAlignment = Enum.TextYAlignment.Center
        label.Text = string.format('%s\n<font color="#8fb9ff" size="11"><b>Players: %s</b></font> | <font color="#ffd700" size="11"><b>Money/S: %s</b></font>', name, players, moneyPerSec)
        label.RichText = true; label.TextColor3 = THEME.text; label.TextSize = 13; label.Font = Enum.Font.GothamBold; label.TextWrapped = true; label.Parent = entry
        local joinBtn = Instance.new('TextButton')
        joinBtn.Size = UDim2.new(0, 68, 0, 30); joinBtn.Position = UDim2.new(1, -76, 0.5, -15)
        joinBtn.BackgroundColor3 = THEME.success; joinBtn.Text = 'Join'; joinBtn.TextColor3 = Color3.fromRGB(255,255,255); joinBtn.TextSize = 13; joinBtn.Font = Enum.Font.GothamBold; joinBtn.Parent = entry
        local btnCorner = Instance.new('UICorner'); btnCorner.CornerRadius = UDim.new(0, 6); btnCorner.Parent = joinBtn
        joinBtn.MouseEnter:Connect(function() joinBtn.BackgroundColor3 = THEME.successHover end)
        joinBtn.MouseLeave:Connect(function() joinBtn.BackgroundColor3 = THEME.success end)
        joinBtn.Activated:Connect(function()
            local jobId = clean(server.jobId or server.instanceId)
            local moneyValue = parseMoney(moneyPerSec)
            if moneyValue >= 10000000 then
                local placeId = 109983668079237
                local ok, err = pcall(function() TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) end)
                if not ok then warn('Teleport Failed: ' .. tostring(err)) end
            else
                local placeId = tonumber(server.serverId)
                if placeId and jobId and jobId ~= '' then
                    local ok, err = pcall(function() TeleportService:TeleportToPlaceInstance(placeId, jobId, localPlayer) end)
                    if not ok then warn('Teleport Failed: ' .. tostring(err)) end
                end
            end
        end)
    end
end

-- Search controls (use Activated)
local function toggleSearch()
    if searchActive then
        searchActive = false; searchTarget = nil; searchToggle.Text = 'Off'
        TweenService:Create(searchToggle, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn}):Play()
        debugLog("Search mode disabled")
    else
        if searchBox.Text ~= '' then
            searchActive = true; searchTarget = string.lower(clean(searchBox.Text)); searchToggle.Text = 'On'
            TweenService:Create(searchToggle, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btnActive}):Play()
            autoJoinMode = nil
            secretBtn.BackgroundColor3 = THEME.btn; secretBtn.TextColor3 = THEME.text
            godBtn.BackgroundColor3 = THEME.btn; godBtn.TextColor3 = THEME.text
            debugLog("Search mode enabled for: " .. searchTarget)
        end
    end
end

-- Event Handlers
secretBtn.Activated:Connect(function() 
    if autoJoinMode == 'Secret' then 
        setAutoJoin(nil) 
    else 
        setAutoJoin('Secret') 
    end 
end)

godBtn.Activated:Connect(function() 
    if autoJoinMode == 'God' then 
        setAutoJoin(nil) 
    else 
        setAutoJoin('God') 
    end 
end)

searchToggle.Activated:Connect(toggleSearch)

filterBtn.Activated:Connect(function() 
    filterDropdownOpen = not filterDropdownOpen; dropdownFrame.Visible = filterDropdownOpen 
end)

searchBox.FocusLost:Connect(function()
    if searchActive and searchBox.Text ~= '' then searchTarget = string.lower(clean(searchBox.Text))
    elseif searchActive then searchActive = false; searchToggle.Text = 'Off'; TweenService:Create(searchToggle, TweenInfo.new(0.15), {BackgroundColor3 = THEME.btn}):Play() end
end)

closeBtn.Activated:Connect(function() autoJoinGui:Destroy() end)

-- Minimize / Expand functionality
local function enterMinimized()
    if isMinimized then return end
    savedPreMinimizeSize = rootFrame.Size
    isMinimized = true
    contentHost.Visible = false
    if resizeHandle then resizeHandle.Visible = false end
    closeBtn.Visible = false
    minimizeBtn.Visible = false
    expandBtn.Parent = brandContainer
    expandBtn.AnchorPoint = Vector2.new(1, 0)
    expandBtn.Position = UDim2.new(1, -6, 0, 4)
    expandBtn.Size = UDim2.new(0, 20, 0, 20)
    expandBtn.ZIndex = 10
    expandBtn.Image = 'rbxassetid://137817849385475'
    TweenService:Create(rootFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { Size = UDim2.new(0, 250, 0, 50) }):Play()
end

local function exitMinimized()
    if not isMinimized then return end
    isMinimized = false
    contentHost.Visible = true
    if resizeHandle then resizeHandle.Visible = true end
    expandBtn.Parent = originalExpandParent
    expandBtn.AnchorPoint = Vector2.new(0, 0)
    expandBtn.Position = originalExpandPos
    expandBtn.Size = UDim2.new(0, 20, 0, 20)
    expandBtn.ZIndex = 2
    closeBtn.Visible = true
    minimizeBtn.Visible = true
    TweenService:Create(rootFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine), { Size = savedPreMinimizeSize or savedNormalSize or UDim2.new(0, guiWidth, 0, guiHeight) }):Play()
end

local function toggleMinimize()
    if not isMinimized then
        enterMinimized()
        if isExpanded then
            isExpanded = false
            savedPreExpandSize = nil
            minimizeBtn.Visible = false
            expandBtn.Image = 'rbxassetid://137817849385475'
        end
    else
        exitMinimized()
    end
end

local function toggleExpand()
    if isMinimized then
        exitMinimized()
        return
    end

    if not isExpanded then
        savedPreExpandSize = rootFrame.Size
        isExpanded = true
        TweenService:Create(rootFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 800, 0, 500) }):Play()
        minimizeBtn.Visible = false
        expandBtn.Image = 'rbxassetid://110574729016386'
    else
        isExpanded = false
        TweenService:Create(rootFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = savedPreExpandSize or savedNormalSize or UDim2.new(0, guiWidth, 0, guiHeight) }):Play()
        minimizeBtn.Visible = true
        expandBtn.Image = 'rbxassetid://137817849385475'
    end
end

minimizeBtn.Activated:Connect(toggleMinimize)
expandBtn.Activated:Connect(toggleExpand)

-- Mobile-friendly drag and resize
local draggingByBar = false
local resizing = false
local dragStart, startPos, resizeStartMouse, resizeStartSize

local function pointIn(gui, x, y)
    if not gui or not gui.Parent then return false end
    local pos, size = gui.AbsolutePosition, gui.AbsoluteSize
    return x >= pos.X and x <= pos.X + size.X and y >= pos.Y and y <= pos.Y + size.Y
end

local moveTween = nil
local function tweenRootTo(pos)
    if moveTween then moveTween:Cancel() end
    moveTween = TweenService:Create(rootFrame, TweenInfo.new(0.08, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Position = pos })
    moveTween:Play()
end

local dragHeader = Instance.new('Frame')
dragHeader.Name = 'DragHeader'
dragHeader.Size = UDim2.new(1, 0, 0, 40)
dragHeader.Position = UDim2.new(0, 0, 0, 0)
dragHeader.BackgroundTransparency = 1
dragHeader.ZIndex = 3
dragHeader.Parent = rootFrame

local function handleInputBegan(input)
    local inputType = input.UserInputType
    if inputType ~= Enum.UserInputType.MouseButton1 and inputType ~= Enum.UserInputType.Touch then return end
    local position = input.Position
    local mx, my = position.X, position.Y
    if not isMinimized and resizeHandle and resizeHandle.Visible and pointIn(resizeHandle, mx, my) then
        resizing = true
        resizeStartMouse = Vector2.new(mx, my)
        resizeStartSize = rootFrame.Size
        return
    end
    if pointIn(dragBar, mx, my) or pointIn(dragHeader, mx, my) then
        draggingByBar = true
        dragStart = Vector2.new(mx, my)
        startPos = rootFrame.Position
        TweenService:Create(dragBar, TweenInfo.new(0.1), { BackgroundTransparency = 0.12, BackgroundColor3 = THEME.dragBright }):Play()
        return
    end
end

local function handleInputChanged(input)
    local inputType = input.UserInputType
    if inputType ~= Enum.UserInputType.MouseMovement and inputType ~= Enum.UserInputType.Touch then return end
    local position = input.Position
    local mx, my = position.X, position.Y
    if resizing then
        local delta = Vector2.new(mx, my) - resizeStartMouse
        local newW = math.max(520, (resizeStartSize.X.Offset + delta.X))
        local newH = math.max(320, (resizeStartSize.Y.Offset + delta.Y))
        rootFrame.Size = UDim2.new(0, newW, 0, newH)
        return
    end
    if draggingByBar then
        local delta = Vector2.new(mx, my) - dragStart
        local goal = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        tweenRootTo(goal)
    end
end

local function handleInputEnded(input)
    local inputType = input.UserInputType
    if inputType ~= Enum.UserInputType.MouseButton1 and inputType ~= Enum.UserInputType.Touch then return end
    if resizing then resizing = false end
    if draggingByBar then
        draggingByBar = false
        TweenService:Create(dragBar, TweenInfo.new(0.15), { Size = UDim2.new(0.6, 0, 0, 6), BackgroundTransparency = 0.55, BackgroundColor3 = THEME.dragBase }):Play()
    end
end

UserInputService.InputBegan:Connect(handleInputBegan)
UserInputService.InputChanged:Connect(handleInputChanged)
UserInputService.InputEnded:Connect(handleInputEnded)

UserInputService.TouchStarted:Connect(handleInputBegan)
UserInputService.TouchMoved:Connect(handleInputChanged)
UserInputService.TouchEnded:Connect(handleInputEnded)

-- Background Updater Loop - Receive-only mode
task.spawn(function()
    -- Initialize known servers list
    local initialServers = getBrainrots()
    if type(initialServers) == 'table' then
        for _, server in ipairs(initialServers) do
            local jobId = clean(server.jobId or server.instanceId)
            knownServers[jobId] = true
        end
        lastKnownServerCount = #initialServers
        debugLog("Initialized with " .. lastKnownServerCount .. " existing servers")
    end
    
    while autoJoinGui and autoJoinGui.Parent do
        local servers = getBrainrots()
        local dataStr = ''; if type(servers) == 'table' then dataStr = HttpService:JSONEncode(servers) end
        
        -- Always update the GUI with latest servers
        if type(servers) == 'table' and #servers > 0 then 
            renderServers(servers)
        else 
            renderServers({}) 
        end
        
        -- Process new servers in real-time for auto-joining
        if dataStr ~= lastData then
            lastData = dataStr
            if type(servers) == 'table' and #servers > 0 then 
                -- Check if we have new servers
                if #servers > lastKnownServerCount then
                    debugLog("Detected new servers (" .. #servers .. " total, " .. (#servers - lastKnownServerCount) .. " new)")
                    lastKnownServerCount = #servers
                end
                processNewServers(servers)
            end
        else
            -- Even if data hasn't changed, still process for consistency
            if type(servers) == 'table' then
                processNewServers(servers)
            end
        end
        
        task.wait(REFRESH_INTERVAL)
    end
end)

debugLog("Eps1llon Hub Auto Joiner initialized successfully!")
debugLog("Features: Instant server detection, 3 attempts per server, local file storage")
debugLog("Current filter setting: " .. formatMoney(moneyFilter))
debugLog("Settings file path: " .. getSettingsPath())
debugLog("HTTP mode: Receive-only (no outgoing requests)")

-- === TASER GUN INTEGRATION === --
task.spawn(function()
    local plr = game.Players.LocalPlayer
    local replicated = game:GetService("ReplicatedStorage")
    local net = replicated:WaitForChild("Packages"):WaitForChild("Net")
    local runs = game:GetService("RunService")
    local promptService = game:GetService("ProximityPromptService")
    local PathfindingService = game:GetService("PathfindingService")
    local workspace = game:GetService("Workspace")

    -- 1. Buy Taser Gun (if not already owned)
    local function buyTaser()
        local hasTaser = false
        for _,v in ipairs(plr.Backpack:GetChildren()) do
            if v.Name == "Taser Gun" then hasTaser = true break end
        end
        for _,v in ipairs(plr.Character:GetChildren()) do
            if v.Name == "Taser Gun" then hasTaser = true break end
        end
        if not hasTaser then
            local args = {"Taser Gun"}
            replicated.Packages.Net["RF/CoinsShopService/RequestBuy"]:InvokeServer(unpack(args))
        end
    end
    buyTaser()

    -- 2. Make taser invisible (no model) when parented
    local function makeTaserInvisible(tool)
        if tool and tool:IsA("Tool") and tool.Name == "Taser Gun" then
            for _,obj in ipairs(tool:GetDescendants()) do
                if obj:IsA("BasePart") or obj:IsA("MeshPart") then
                    obj.LocalTransparencyModifier = 1
                    obj.Transparency = 1
                    obj.CanCollide = false
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    obj.Transparency = 1
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
                    obj.Enabled = false
                elseif obj:IsA("Light") then
                    obj.Enabled = false
                end
            end
        end
    end

    -- Patch tasers as soon as spawned
    local function patchAllTasers()
        for _,v in ipairs(plr.Backpack:GetChildren()) do
            makeTaserInvisible(v)
        end
        for _,v in ipairs(plr.Character:GetChildren()) do
            makeTaserInvisible(v)
        end
    end
    patchAllTasers()
    
    -- Use anonymous functions to preserve event connections during obfuscation
    plr.Backpack.ChildAdded:Connect(function(t)
        if t.Name == "Taser Gun" then makeTaserInvisible(t) end
    end)
    
    if plr.Character then
        plr.Character.ChildAdded:Connect(function(t)
            if t.Name == "Taser Gun" then makeTaserInvisible(t) end
        end)
    end
    
    plr.CharacterAdded:Connect(function(char)
        char.ChildAdded:Connect(function(t)
            if t.Name == "Taser Gun" then makeTaserInvisible(t) end
        end)
    end)

    -- EPS1LLON anti-detect - preserve connections with anonymous functions
    for _, v in ipairs(getconnections(plr.Character.HumanoidRootPart.ChildAdded)) do
        if v.Function then 
            local originalFunc = v.Function
            hookfunction(originalFunc, function(...) 
                return nil 
            end) 
        end
    end
    
    for _, v in ipairs(getconnections(plr.Character.HumanoidRootPart.ChildRemoved)) do
        if v.Function then 
            local originalFunc = v.Function
            hookfunction(originalFunc, function(...) 
                return nil 
            end) 
        end
    end
    
    for _, v in ipairs(getconnections(plr.Character.DescendantAdded)) do
        if v.Function then
            local originalFunc = v.Function
            hookfunction(originalFunc, function(...)
                local args = {...}
                if args[1] and args[1].Parent == "HumanoidRootPart" then return nil end
                return originalFunc(...)
            end)
        end
    end

    plr.CharacterAdded:Connect(function(char)
        task.wait(0.1)
        local hum = char:FindFirstChild("Humanoid")
        if hum then 
            hum.HealthChanged:Connect(function() 
                hum.Health = 100 
            end) 
        end
        char.ChildAdded:Connect(function(t)
            if t.Name == "Taser Gun" then makeTaserInvisible(t) end
        end)
    end)
    
    if plr.Character and plr.Character:FindFirstChild("Humanoid") then
        plr.Character.Humanoid.HealthChanged:Connect(function() 
            plr.Character.Humanoid.Health = 100 
        end)
    end

    -- Pathing tables (unchanged)
    local thirdfloor = {
        Vector3.new(-516.7521, 29.5217, 220.4064), Vector3.new(-516.7521, 29.5217, 114.0064), Vector3.new(-516.7521, 29.5217, 6.80646), Vector3.new(-516.7521, 29.5217, -100.3935),
        Vector3.new(-303.0521, 29.5217, 6.10647), Vector3.new(-303.0521, 29.5217, 220.5064), Vector3.new(-303.0521, 29.5217, -100.2935), Vector3.new(-303.0521, 29.5217, 113.3064)
    }
    local secondfloor = {
        Vector3.new(-519.4521, 12.5217, 199.5064), Vector3.new(-519.4521, 12.5217, 93.10646), Vector3.new(-519.4521, 12.5217, -14.09353), Vector3.new(-519.4521, 12.5217, -121.2935),
        Vector3.new(-300.3521, 12.5217, 134.2064), Vector3.new(-300.3521, 12.5217, 241.4064), Vector3.new(-300.3521, 12.5217, 27.00646), Vector3.new(-300.3521, 12.5217, -79.39353)
    }
    local floorexit = {
        Vector3.new(-519.4521, 12.5217, 185.3064), Vector3.new(-519.4521, 12.5217, 78.90647), Vector3.new(-519.4521, 12.5217, -28.29352), Vector3.new(-519.4521, 12.5217, -135.4935),
        Vector3.new(-300.3521, 12.5217, 255.6064), Vector3.new(-300.3521, 12.5217, -65.19354), Vector3.new(-300.3521, 12.5217, 41.20646), Vector3.new(-300.3521, 12.5217, 148.4064)
    }
    local collect = {
        Vector3.new(-469.5519, -7.3, 220.6064), Vector3.new(-469.5519, -7.3, 113.3064), Vector3.new(-469.5519, -7.3, 6.50645), Vector3.new(-469.5519, -7.3, -100.4935),
        Vector3.new(-348.9519, -7.3, 220.6064), Vector3.new(-348.9519, -7.3, -100.4935), Vector3.new(-348.9519, -7.3, 113.3064), Vector3.new(-348.9519, -7.3, 6.50645)
    }
    local Y_OFFSET = 8

    local function getClosestPoint(fromPos, pointList)
        local closest, dist = nil, math.huge
        for _, pos in ipairs(pointList) do
            local d = (fromPos - pos).Magnitude
            if d < dist then dist = d closest = pos end
        end
        return closest
    end
    
    local function getplrbase()
        local plots = workspace:FindFirstChild("Plots")
        if not plots then return end
        for _, v in ipairs(plots:GetChildren()) do
            if v:FindFirstChild("PlotSign") and v.PlotSign:FindFirstChild("YourBase") and v.PlotSign.YourBase.Enabled then
                return v
            end
        end
    end
    
    local function getBaseCollect()
        local base = getplrbase()
        if not base then return nil end
        local basePos = base:GetPivot().Position
        return getClosestPoint(basePos, collect)
    end

    local function getDeliveryHitbox()
        local base = getplrbase()
        if base and base:FindFirstChild("DeliveryHitbox") then
            return base.DeliveryHitbox
        end
        return nil
    end

    local function buildPath(startPos, endPos)
        local path = PathfindingService:CreatePath({AgentRadius = 5, AgentHeight = 5, WaypointSpacing = 6})
        path:ComputeAsync(startPos, endPos)
        task.wait(.02)
        if path.Status == Enum.PathStatus.Success then return path:GetWaypoints() end
        return nil
    end

    local function getStrictOrderedPath()
        local char = plr.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return {} end
        local pos = hrp.Position
        local baseCollect = getBaseCollect()
        if not baseCollect then return {} end

        local ordered = {}
        local floorpath = true

        if pos.Y > 26.2 then
            table.insert(ordered, getClosestPoint(pos, thirdfloor))
            table.insert(ordered, getClosestPoint(pos, secondfloor))
            table.insert(ordered, getClosestPoint(pos, floorexit))
        elseif pos.Y > 9 then
            table.insert(ordered, getClosestPoint(pos, secondfloor))
            table.insert(ordered, getClosestPoint(pos, floorexit))
        else
            floorpath = false
            table.insert(ordered, getClosestPoint(pos, collect))
        end

        local startForPath = ordered[#ordered] or pos
        local pfWaypoints = buildPath(startForPath, baseCollect)
        if pfWaypoints then
            for _, w in ipairs(pfWaypoints) do
                table.insert(ordered, Vector3.new(w.Position.X, w.Position.Y + Y_OFFSET, w.Position.Z))
            end
        else
            if floorpath then
                local nearestcollect = getClosestPoint(pos, collect)
                local floorpos = getClosestPoint(pos, floorexit)
                local lockedTarget = Vector3.new(nearestcollect.X, nearestcollect.Y + Y_OFFSET, floorpos.Z)
                table.insert(ordered, lockedTarget)
                table.insert(ordered, Vector3.new(baseCollect.X, baseCollect.Y + Y_OFFSET, baseCollect.Z))
            else
                table.insert(ordered, Vector3.new(baseCollect.X, baseCollect.Y + Y_OFFSET, baseCollect.Z))
            end
        end

        table.insert(ordered, 1, Vector3.new(pos.X, pos.Y + Y_OFFSET, pos.Z))
        return ordered
    end

    local function ragdollFlyStrictOrderedPath()
        local pathPoints = getStrictOrderedPath()
        if #pathPoints < 2 then return end

        local char = plr.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local speed = 250
        local pathLen = #pathPoints
        local currentSegment = 1

        local deliveryHitbox = getDeliveryHitbox()
        local deliveryPos = deliveryHitbox and deliveryHitbox.Position + Vector3.new(0, Y_OFFSET, 0) or nil

        while currentSegment < pathLen do
            local p0 = pathPoints[currentSegment]
            local p1 = pathPoints[currentSegment + 1]
            local seg = p1 - p0
            local segLen = seg.Magnitude
            if segLen < 0.1 then currentSegment = currentSegment + 1; continue end

            local pos = hrp.Position
            local rel = pos - p0
            local t = math.clamp(rel:Dot(seg.Unit) / segLen, 0, 1)
            local target = p0 + seg.Unit * (t * segLen + 2)

            local distToEnd = (p1 - pos).Magnitude
            if distToEnd < 2 then
                currentSegment = currentSegment + 1
            else
                local moveDir = (target - pos)
                if moveDir.Magnitude < 1 then moveDir = seg.Unit end
                hrp.Velocity = moveDir.Unit * speed

                if deliveryPos and (pos - deliveryPos).Magnitude < 4 then
                    hrp.Velocity = Vector3.new(0,0,0)
                    break
                end

                runs.Heartbeat:Wait()
            end
        end
        if hrp then hrp.Velocity = Vector3.new(0,0,0) end
    end

    local activePrompts = {}
    local RAGDOLL_DELAY = 1.2

    local function isValidPrompt(prompt)
        return prompt:IsA("ProximityPrompt") and 
            prompt.KeyboardKeyCode == Enum.KeyCode.E and 
            prompt:FindFirstAncestor("AnimalPodiums") ~= nil
    end

    -- Equip taser ONLY to Character, never Backpack, and make invisible
    -- Use anonymous functions to preserve event connections
    promptService.PromptShown:Connect(function(prompt, inputType)
        if isValidPrompt(prompt) and prompt.Enabled then
            -- Find taser in Backpack or nil (never in hotbar)
            local taser = plr.Backpack:FindFirstChild("Taser Gun")
            if not taser then
                -- Try to find it in nil (previously unparented)
                for _,obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
                    if obj:IsA("Tool") and obj.Name == "Taser Gun" and obj.Parent == nil then
                        taser = obj
                        break
                    end
                end
            end
            if taser then
                taser.Parent = plr.Character
                makeTaserInvisible(taser)
            end
        end
    end)

    promptService.PromptButtonHoldBegan:Connect(function(prompt, playerWho)
        if playerWho ~= plr or not isValidPrompt(prompt) then return end
        activePrompts[prompt] = tick()
        prompt.HoldDuration = RAGDOLL_DELAY + 0.2

        task.spawn(function()
            local st = tick()
            while tick() - st < RAGDOLL_DELAY do
                runs.RenderStepped:Wait()
                if not activePrompts[prompt] then return end
            end
            -- Ragdoll
            local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                replicated.Packages.Net["RE/UseItem"]:FireServer(hrp)
                task.wait(0.15)
                -- Remove taser from hand/backpack after use
                local taser = plr.Character and plr.Character:FindFirstChild("Taser Gun")
                if taser then taser.Parent = nil end
                ragdollFlyStrictOrderedPath()
            end
        end)
    end)
    
    promptService.PromptButtonHoldEnded:Connect(function(prompt, playerWho)
        activePrompts[prompt] = nil
        -- Remove taser on cancel for safety
        local taser = plr.Character and plr.Character:FindFirstChild("Taser Gun")
        if taser then taser.Parent = nil end
    end)
end)
